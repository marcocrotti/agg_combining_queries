
// Parameters

params {
    // HPC configuration
    executor            = 'lsf'
    cache               = 'lenient'
    queue               = { task.attempt < 2 ? 'short' : 'medium' }
    cpus                = { 1 + (task.attempt - 1) }
    memory              = { 1.GB + (1.GB * (task.attempt - 1)) }
    cluster_options     = '-P Bio'
    error_strategy      = { task.exitStatus in [130, 137, 139] ? 'retry' : 'finish' }
    max_retries         = 3
    queue_size          = 5000
    poll_interval       = '30 sec'
    exit_read_timeout   = '30 sec'
    debug               = true

    // input options
    input_bed = "${projectDir}/input/input_genes.bed"
    agg_chunks_bed = '${projectDir}/input/aggV2_chunk_names.bed'
    severity_scale = null
    severity = null
    include_exclude = '-i'
    expression = 'GT="AA"'
    format = '[%SAMPLE\t%CHROM\t%POS\t%REF\t%ALT\n]'
    outdir = 'results'

    // Containers
    linux_container     = 'quay.io/ubuntu:20.04'
    bedtools_container  = 'quay.io/mcrotti1/bedtools:latest'
    bcftools_container  = 'quay.io/mcrotti1/bcftools:latest'
    python_container    = 'quay.io/mcrotti1/python:latest'

    // Singularity options
    singularity_enabled     = true
    singularity_auto_mounts = true
    singularity_cache       = 'singularity'
    
}

singularity {
    enabled     = params.singularity_enabled
    autoMounts  = params.singularity_auto_mounts
    cacheDir    = params.singularity_cache
    runOptions  = params.singularity_run_options
}

executor {
    name            = params.executor
    queueSize       = params.queue_size
    pollInterval    = params.poll_interval
    exitReadTimeout = params.exit_read_timeout
}


process {
    container       = params.linux_container
    errorStrategy   = params.error_strategy
    maxRetries      = params.max_retries
    cpus            = params.cpus
    queue           = params.queue
    memory          = params.memory
    cache           = params.cache
    clusterOptions  = params.cluster_options
    debug           = params.debug


    withName: FIND_CHUNK {
        container = params.bedtools_container
    }

    withName: EXTRACT_VARIANT_VEP {
        container = params.bcftools_container
    }
  
    withName: INTERSECT_ANNOTATION_GENOTYPE_VCF {
        container = params.bcftools_container
    }

    withName: FIND_SAMPLES {
        container = params.bcftools_container
    }

    withName: SUMMARISE_OUTPUT {
        container = params.python_container
    }

	withName: DUMP_VERSIONS {
        container = params.python_container
    }

}

